<div id="plotland" class="absolute inset-0">
  <canvas id="landing-canvas"></canvas>
</div>

<script is:inline>
  // https://codepen.io/jayadul/pen/WNNwQmp
  let rafId = 0;
  class Bubble {
    constructor(canvasWidth, canvasHeight) {
      this.maxHeight = canvasHeight;
      this.maxWidth = canvasWidth;
      this.randomise();
    }

    generateDecimalBetween(min, max) {
      return (Math.random() * (min - max) + max).toFixed(2);
    }

    update() {
      this.posX = this.posX - this.movementX;
      this.posY = this.posY - this.movementY;

      if (this.posY < 0 || this.posX < 0 || this.posX > this.maxWidth) {
        this.randomise();
        this.posY = this.maxHeight;
      }
    }

    randomise() {
      this.colour = Math.random() * 255;
      this.size = this.generateDecimalBetween(2, 6);
      this.movementX = this.generateDecimalBetween(-0.4, 0.4);
      this.movementY = this.generateDecimalBetween(0.7, 2);
      this.posX = this.generateDecimalBetween(0, this.maxWidth);
      this.posY = this.generateDecimalBetween(0, this.maxHeight);
    }
  }

  class Setup {
    constructor() {
      rafId > 0 && cancelAnimationFrame(rafId);
      this.canvas = document.getElementById("landing-canvas");
      this.ctx = this.canvas.getContext("2d");
      this.canvas.height = window.innerHeight;
      this.canvas.width = window.innerWidth;
      this.bubblesList = [];
      this.generateBubbles();
      rafId = this.animate();
    }

    animate() {
      let self = this;
      self.ctx.clearRect(0, 0, self.canvas.width, self.canvas.height);
      self.bubblesList.forEach(function (bubble) {
        bubble.update();
        self.ctx.beginPath();
        self.ctx.arc(bubble.posX, bubble.posY, bubble.size, 0, 2 * Math.PI);
        self.ctx.fillStyle = "white";
        self.ctx.fill();
        self.ctx.strokeStyle = "white";
        self.ctx.stroke();
      });

      let id = requestAnimationFrame(this.animate.bind(this));
      rafId = id;
      return id;
    }

    addBubble(bubble) {
      return this.bubblesList.push(bubble);
    }

    generateBubbles() {
      let self = this;
      for (let i = 0; i < self.bubbleDensity(); i++) {
        self.addBubble(new Bubble(self.canvas.width, self.canvas.height));
      }
    }

    bubbleDensity() {
      return Math.sqrt((this.canvas.height, this.canvas.width) * 5);
    }
  }

  const container = document.querySelector("#plotland");
  window.onload = function () {
    const create = () => new Setup();
    const resizeObserver = new ResizeObserver(create);
    resizeObserver.observe(container);
  };

  window.window.requestAnimFrame = (function () {
    return (
      window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      window.oRequestAnimationFrame ||
      window.msRequestAnimationFrame ||
      function (callback) {
        window.setTimeout(callback, 1000 / 60);
      }
    );
  })();
</script>
