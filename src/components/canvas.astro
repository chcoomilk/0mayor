<!-- <div id="plotland" class="absolute inset-0">
  <canvas id="landing-canvas"></canvas>
</div>

<script is:inline>
  // https://codepen.io/jayadul/pen/WNNwQmp
  let rafId = 0;
  class Bubble {
    constructor(canvasWidth, canvasHeight) {
      this.maxHeight = canvasHeight;
      this.maxWidth = canvasWidth;
      this.randomise();
    }

    generateDecimalBetween(min, max) {
      return (Math.random() * (min - max) + max).toFixed(2);
    }

    update() {
      this.posX = this.posX - this.movementX;
      this.posY = this.posY - this.movementY;

      if (this.posY < 0 || this.posX < 0 || this.posX > this.maxWidth) {
        this.randomise();
        this.posY = this.maxHeight;
      }
    }

    randomise() {
      this.colour = Math.random() * 255;
      this.size = this.generateDecimalBetween(2, 6);
      this.movementX = this.generateDecimalBetween(-0.4, 0.4);
      this.movementY = this.generateDecimalBetween(0.7, 2);
      this.posX = this.generateDecimalBetween(0, this.maxWidth);
      this.posY = this.generateDecimalBetween(0, this.maxHeight);
    }
  }

  class Setup {
    constructor() {
      rafId > 0 && cancelAnimationFrame(rafId);
      this.canvas = document.getElementById("landing-canvas");
      this.ctx = this.canvas.getContext("2d");
      this.canvas.height = window.innerHeight;
      this.canvas.width = window.innerWidth;
      this.bubblesList = [];
      this.generateBubbles();
      rafId = this.animate();
    }

    animate() {
      let self = this;
      self.ctx.clearRect(0, 0, self.canvas.width, self.canvas.height);
      self.bubblesList.forEach(function (bubble) {
        bubble.update();
        self.ctx.beginPath();
        self.ctx.arc(bubble.posX, bubble.posY, bubble.size, 0, 2 * Math.PI);
        self.ctx.fillStyle = "white";
        self.ctx.fill();
        self.ctx.strokeStyle = "white";
        self.ctx.stroke();
      });

      let id = requestAnimationFrame(this.animate.bind(this));
      rafId = id;
      return id;
    }

    addBubble(bubble) {
      return this.bubblesList.push(bubble);
    }

    generateBubbles() {
      let self = this;
      for (let i = 0; i < self.bubbleDensity(); i++) {
        self.addBubble(new Bubble(self.canvas.width, self.canvas.height));
      }
    }

    bubbleDensity() {
      return Math.sqrt((this.canvas.height, this.canvas.width) * 5);
    }
  }

  const container = document.querySelector("#plotland");
  window.onload = function () {
    const create = () => new Setup();
    const resizeObserver = new ResizeObserver(create);
    resizeObserver.observe(container);
  };

  window.window.requestAnimFrame = (function () {
    return (
      window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      window.oRequestAnimationFrame ||
      window.msRequestAnimationFrame ||
      function (callback) {
        window.setTimeout(callback, 1000 / 60);
      }
    );
  })();
</script> -->
<div id="4i30" class="absolute inset-0">
  <canvas id="4i30-canvas"></canvas>
</div>

<script>
  import invariant from "tiny-invariant";
  const COUNT = 800;
  const SPEED = 0.1;
  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;
    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
    }
    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;
      this.x += this.x * (speed * 0.0225) * this.z;
      this.y += this.y * (speed * 0.0225) * this.z;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }
    draw(ctx: CanvasRenderingContext2D) {
      ctx.lineWidth = this.z;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }
  const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
  let rafId = 0;
  const canvas = document.querySelector("#4i30-canvas") as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  const ctx = canvas.getContext("2d");
  const container = document.querySelector("#4i30") as HTMLElement;
  invariant(container, "container should not be null");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);
  function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);
    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);
    for (const star of stars) {
      star.x = Math.random() * width - width / 2;
      star.y = Math.random() * height - height / 2;
      star.z = 0;
    }
    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(0, 0, 0, 0.4)";
    ctx.strokeStyle = "white";
    rafId = requestAnimationFrame(frame);
  }
  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;
    for (const star of stars) {
      star.update(width, height, SPEED);
      star.draw(ctx);
    }
    ctx.fillRect(-width / 2, -height / 2, width, height);
    rafId = requestAnimationFrame(frame);
  }
</script>
